/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type {
  Provider,
  Account,
  AbstractAddress,
  BytesLike,
  DeployContractOptions,
  StorageSlot,
  DeployContractResult,
} from "fuels";
import type { PaymentAbi, PaymentAbiInterface } from "../PaymentAbi";

const _abi = {
  encoding: "1",
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "struct AssetId",
      components: [
        {
          name: "bits",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "amount_to_transfer",
          type: 3,
          typeArguments: null,
        },
        {
          name: "asset_id",
          type: 2,
          typeArguments: null,
        },
        {
          name: "recipient",
          type: 1,
          typeArguments: null,
        },
      ],
      name: "transfer",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
  ],
  loggedTypes: [],
  messagesTypes: [],
  configurables: [],
};

const _storageSlots: StorageSlot[] = [];

export const PaymentAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): PaymentAbiInterface {
    return new Interface(_abi) as unknown as PaymentAbiInterface;
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ): PaymentAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as PaymentAbi;
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<DeployContractResult<PaymentAbi>> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    return factory.deployContract<PaymentAbi>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
};
