/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type { Provider, Account, AbstractAddress, BytesLike, DeployContractOptions, StorageSlot, DeployContractResult } from "fuels";
import type { StoreAbi, StoreAbiInterface } from "../StoreAbi";

const _abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "get_value",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "value",
          "type": 0,
          "typeArguments": null
        }
      ],
      "name": "set_value",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const _storageSlots: StorageSlot[] = [
  {
    "key": "1f5327d8b018fe8a341aec49e087546980b521535a650107a53efdc5e7038723",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export const StoreAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): StoreAbiInterface {
    return new Interface(_abi) as unknown as StoreAbiInterface
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): StoreAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as StoreAbi
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<StoreAbi>> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    return factory.deployContract<StoreAbi>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
}
